/* Copyright 2019 Kristofer Björnson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// @cond MyTBTK_FULL_DOCUMENTATION
/** @package MyTBTKcalc
 *  @file GaussianState.h
 *  @brief State formed as a contraction of Gaussians.
 *
 *  @author Kristofer Björnson
 */

#ifndef COM_DAFER45_MyTBTK_GAUSSIAN_STATE
#define COM_DAFER45_MyTBTK_GAUSSIAN_STATE

#include "MyTBTK/AbstractState.h"

namespace MyTBTK{

class GaussianState : public AbstractState{
public:
	/** Constructor. */
	GaussianState(
		const Index &index,
		const Vector3d &coordinates,
		unsigned int linearIndex,
		unsigned int basisSize
	);

	/** Implements AbstracState::clone(). */
	virtual GaussianState* clone() const;

	/** Implements AbstractState::getOverlap(). */
	virtual std::complex<double> getOverlap(
		const AbstractState &ket
	) const;

	/** Implements AbstractState::getMatrixElement(). */
	virtual std::complex<double> getMatrixElement(
		const AbstractState &ket,
		const AbstractOperator &o
	) const;

	/** Set overlap.
	 *
	 *  @param overlap The value of the overlap.
	 *  @param linearKetIndex The linear index of the ket that the overlap
	 *  corresponds to. */
	void setOverlap(
		const std::complex<double> &overlap,
		unsigned int linearKetIndex
	);

	/** Set kinetic term.
	 *
	 *  @param kineticTerm The value of the kinetic term.
	 *  @param linearKetIndex The linear index of the ket that the kinetic
	 *  term corresponds to. */
	void setKineticTerm(
		const std::complex<double> &kineticTerm,
		unsigned int linearKetIndex
	);

	/** Set nuclear term.
	 *
	 *  @param nuclearTerm The value of the nuclear term.
	 *  @param linearKetIndex The linear index of the ket that the nuclear
	 *  term corresponds to. */
	void setNuclearTerm(
		const std::complex<double> &nuclearTerm,
		unsigned int linearKetIndex
	);
private:
	/** Linear index allowing for quick identification of different state.
	 *  The index is given by 2*libintIndex + s, where libintIndex is the
	 *  state number given by libint, while s is the spin index (0 or 1).
	 */
	unsigned int linearIndex;

	/*** Total number of basis functions that has been generated by libint,
	 *  of which this is one state. */
	unsigned int basisSize;

	/** Values for the overlap integral between this state and other
	 *  states. */
	std::vector<std::complex<double>> overlaps;

	/** Values for the kinetic terms between this state and other states.
	 */
	std::vector<std::complex<double>> kineticTerms;

	/** Values for the nuclear terms between this state and other states.
	 */
	std::vector<std::complex<double>> nuclearTerms;
};

inline GaussianState* GaussianState::clone() const{
	return new GaussianState(*this);
}

inline void GaussianState::setOverlap(
	const std::complex<double> &overlap,
	unsigned int linearKetIndex
){
	overlaps[linearKetIndex] = overlap;
}

inline void GaussianState::setKineticTerm(
	const std::complex<double> &kineticTerm,
	unsigned int linearKetIndex
){
	kineticTerms[linearKetIndex] = kineticTerm;
}

inline void GaussianState::setNuclearTerm(
	const std::complex<double> &nuclearTerm,
	unsigned int linearKetIndex
){
	nuclearTerms[linearKetIndex] = nuclearTerm;
}

};	//End of namespace MyTBTK

#endif
/// @endcond
