function UHF(Alg::UHFa)
    ints = IntegralHelper{Float64}()
    UHF(ints, Alg)
end

function UHF(mol::MyMolecule, Alg::UHFa)
    UHF(IntegralHelper{Float64}(molecule=mol), Alg)
end

function UHF(ints::IntegralHelper{Float64}, Alg::UHFa)
    MyFermi.HartreeFock.uhf_header()
    output("Collecting necessary integrals...")
    t = @elapsed begin
        ints["S"]
        ints["T"]
        ints["V"]
        ints["ERI"]
    end
    output("Done in {:10.5f} s", t)

    guess = Options.get("scf_guess")
    if guess == "core"
        CŒ±, Œõ =  RHF_core_guess(ints)
        CŒ≤ = deepcopy(CŒ±)
    elseif guess == "gwh"
        CŒ±, Œõ = RHF_gwh_guess(ints)
        CŒ≤ = deepcopy(CŒ±)
    end
    UHF(ints, CŒ±, CŒ≤, Œõ, Alg)
end


function UHF(ints::IntegralHelper{Float64, <:AbstractERI, AtomicOrbitals}, CŒ±::AbstractMatrix, CŒ≤::AbstractMatrix, Œõ::AbstractMatrix, Alg::UHFa)
    molecule = ints.molecule
    output(MyFermi.string_repr(molecule))
    
    # Grab options
    maxit = Options.get("scf_max_iter")
    Etol = Options.get("scf_e_conv")
    Dtol = Options.get("scf_max_rms")
    do_diis = Options.get("diis")
    oda = Options.get("oda")
    oda_cutoff = Options.get("oda_cutoff")
    oda_shutoff = Options.get("oda_shutoff")

    # Loop variables
    ite = 1
    E = 0.0
    ŒîE = 1.0
    Drms = 1.0
    diis = false
    damp = 0.0
    converged = false
    
    NŒ± = molecule.NŒ±
    NŒ≤ = molecule.NŒ≤
    Vnuc = MyMolecules.nuclear_repulsion(molecule.atoms)
    S = ints["S"]
    T = ints["T"]
    V = ints["V"]
    ERI = ints["ERI"]
    m = size(S)[1]
    DŒ± = zeros(Float64, (m,m))
    DŒ≤ = zeros(Float64, (m,m))
    JŒ± = zeros(Float64, (m,m))
    JŒ≤ = zeros(Float64, (m,m))
    KŒ± = zeros(Float64, (m,m))
    KŒ≤ = zeros(Float64, (m,m))
    œµŒ± = zeros(Float64, (m))
    œµŒ≤ = zeros(Float64, (m))
    FŒ± = zeros(Float64, (m,m))
    FŒ≤ = zeros(Float64, (m,m))
    DsŒ± = deepcopy(DŒ±)
    DsŒ≤ = deepcopy(DŒ≤)
    FsŒ± = deepcopy(FŒ±)
    FsŒ≤ = deepcopy(FŒ≤)
    
    H = T + V
    DŒ± = buildD!(DŒ±, CŒ±, NŒ±)
    DŒ≤ = buildD!(DŒ≤, CŒ≤, NŒ≤)
    DŒ±_old = deepcopy(DŒ±)
    DŒ≤_old = deepcopy(DŒ≤)
    DsŒ± = deepcopy(DŒ±)
    DsŒ≤ = deepcopy(DŒ≤)


    build_fock!(FŒ±, FŒ≤, JŒ±, JŒ≤, KŒ±, KŒ≤, DŒ±, DŒ≤, ints)
    output(" Guess Energy {:20.14f}", UHFEnergy(H, DŒ±, DŒ≤, FŒ±, FŒ≤, Vnuc))
 
    output("\n Iter.   {:>15} {:>10} {:>10} {:>8} {:>8} {:>8}", "E[UHF]", "ŒîE", "D·µ£‚Çò‚Çõ", "t", "DIIS", "damp")
    output(repeat("-",80))
    if do_diis
        DM = MyFermi.DIIS.DIISManager{Float64,Float64}(size=Options.get("ndiis"))
        diis_start = Options.get("diis_start")
    end 
    t = @elapsed while ite <= maxit
        t_iter = @elapsed begin
            E_old = E
            
            # Transform Fock matrices to MO basis
            FÃÉŒ± = Œõ*FŒ±*Œõ
            FÃÉŒ≤ = Œõ*FŒ≤*Œõ
            
            # Solve for eigenvalues and eigenvectors
            œµŒ±, CÃÉŒ± = LinearAlgebra.eigen(Symmetric(FÃÉŒ±), sortby=x->x)
            œµŒ≤, CÃÉŒ≤ = LinearAlgebra.eigen(Symmetric(FÃÉŒ≤), sortby=x->x)
            
            # Transform orbital coefficient matrices to AO basis
            CŒ± = Œõ*CÃÉŒ±
            CŒ≤ = Œõ*CÃÉŒ≤
            
            # Build density matrices
            buildD!(DŒ±, CŒ±, NŒ±)
            buildD!(DŒ≤, CŒ≤, NŒ≤)
            
            # Build Fock matrix
            build_fock!(FŒ±, FŒ≤, JŒ±, JŒ≤, KŒ±, KŒ≤, DŒ±, DŒ≤, ints)
            
            # Calculate energy
            E = UHFEnergy(H, DŒ±, DŒ≤, FŒ±, FŒ≤, Vnuc)
            
            # Store vectors for DIIS
            if do_diis
                err_Œ± = transpose(Œõ)*(FŒ±*DŒ±*S - S*DŒ±*FŒ±)*Œõ
                err_Œ≤ = transpose(Œõ)*(FŒ≤*DŒ≤*S - S*DŒ≤*FŒ≤)*Œõ
                err_v = vcat(err_Œ±, err_Œ≤)
                F_v = vcat(FŒ±, FŒ≤)
                push!(DM, F_v, err_v)
            end

            # Branch for ODA vs DIIS convergence aids
            diis = false
            damp = 0.0
            # Use ODA damping?
            if oda && Drms > oda_cutoff && ite < oda_shutoff
                damp = odadamping(DŒ±, DsŒ±, FŒ±, FsŒ±)
                damp = odadamping(DŒ≤, DsŒ≤, FŒ≤, FsŒ≤)
            # Or Use DIIS?
            elseif do_diis && ite > diis_start
                diis = true
                F_v = MyFermi.DIIS.extrapolate(DM)
                FŒ± .= F_v[1:m, :]
                FŒ≤ .= F_v[m+1:2m, :]
            end

            # Calculate energy difference, Drms, and check for convergence
            ŒîE = E-E_old
            ŒîDŒ± = DŒ± - DŒ±_old 
            ŒîDŒ≤ = DŒ≤ - DŒ≤_old
            Drms = (sum(ŒîDŒ±.^2)/m^2)^(1/2) + (sum(ŒîDŒ≤.^2)/m^2)^(1/2)
            DŒ±_old .= DŒ±
            DŒ≤_old .= DŒ≤
        end
        output("    {:<3} {:>15.10f} {:>11.3e} {:>11.3e} {:>8.2f} {:>8}    {:5.2f}", ite, E, ŒîE, Drms, t_iter, diis, damp)
        ite += 1
        if (abs(ŒîE) <= Etol) & (Drms <= Dtol) & (ite > 5)
            converged = true
            break
        end
    end

    nocc = NŒ± + NŒ≤  # TODO
    nvir = 2*m - nocc   #    output(repeat("-",80))

    output("    UHF done in {:>5.2f}s", t)
    output("    @Final UHF Energy     {:>20.12f} E‚Çï", E)
    output("\n   ‚Ä¢ Orbitals Summary",)
    output("\n   ‚¨ó Alpha (Œ±) orbitals")
    output("\n {:>10}   {:>15}   {:>10}", "Orbital", "Energy", "Occupancy")
    for i in eachindex(œµŒ±)
        output(" {:>10}   {:> 15.10f}   {:>6}", i, œµŒ±[i], (i ‚â§ NŒ± ? "‚Üø" : ""))
    end
    output("\n   ‚¨ó Beta (Œ≤) orbitals")
    output("\n {:>10}   {:>15}   {:>10}", "Orbital", "Energy", "Occupancy")
    for i in eachindex(œµŒ≤)
        output(" {:>10}   {:> 15.10f}   {:>6}", i, œµŒ≤[i], (i ‚â§ NŒ≤ ? "‚áÇ" : ""))
    end
    output("")
    if converged
        output("   ‚úî  SCF Equations converged üòÑ")
    else
        output("‚ùó SCF Equations did not converge in {:>5} iterations ‚ùó", maxit)
    end
    output(repeat("-",80))

    Orbitals = UHFOrbitals(molecule, ints.basis, œµŒ±, œµŒ≤, E, CŒ±, CŒ≤)
    return UHF(molecule, E, nocc, nvir, Orbitals, ŒîE, Drms)
end
